<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【CF1537D】Deleting Divisors</title>
      <link href="/2021/07/07/%E3%80%90CF1537D%E3%80%91Deleting-Divisors/"/>
      <url>/2021/07/07/%E3%80%90CF1537D%E3%80%91Deleting-Divisors/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/problemset/problem/1537/D">题目地址</a>，一道R1700的题目</p><h1 id="一句话题意"><a href="#一句话题意" class="headerlink" title="一句话题意"></a>一句话题意</h1><p>给定正整数$n$，每次可以对其做如下操作：将当前的$n$减去它的除了$1$和$n$以外的因子得到新的$n$</p><p>现在Alice和Bob轮流操作，Alice先手，不能操作者输。</p><p>$t$组询问，每组询问给定$n$，如果两人都以最佳策略操作，问谁能胜出。</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>可以分为以下三种情况讨论：</p><ol><li>$n$为奇数</li><li>$n$为偶数，但不是$2$的幂</li><li>$n$是$2$的幂</li></ol><p>考虑第1种情况。由于$n$是奇数，那么它的任一因子$k$也一定是奇数，而$k$又一定是$n-k$的因子，所以$n-k$是偶数，但不是$2$的幂（情况2）。这是情况1唯一可行的操作。</p><p>考虑第2种情况。显然$n$存在一个奇因子。一种可行的操作是对$n$减去它的一个奇因子，得到一个奇数（情况1）。</p><p>我们知道，当$n$为质数是必败态，因为质数的因子只有$1$和它本身。而质数要么是$2$（$2^1$），要么是一个奇数（情况1）。</p><p>若当前玩家面临情况2，可以用之前提到的方法将另一个玩家面临的情况转化为情况1.而另一玩家只能将情况1转化为情况2.由于游戏一定会在有限步内结束，所以面临情况1的玩家最终一定会遇到一个质数，情况2是一个必胜态，而情况1是一个必败态。</p><p>再来考虑第3种情况。有两种可行的操作：令$n$折半（若$n=2^k$，则$n’=2^k-2^{k-1}=2^{k-1}$，仍为情况3），或是减去一个其他$2$的幂。第二种操作会使得另一玩家面临情况2，即必胜态，所以不可能采取第二种操作。于是$k$为奇数时为必败态，$k$为偶数时为必胜态。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">0</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f|=(c==<span class="string">&#x27;-&#x27;</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;t=t*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">if</span>(f)t=-t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500000</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b?<span class="built_in">gcd</span>(b,a%b):a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Checkpow2</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> re=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++re;</span><br><span class="line">        x/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x==<span class="number">1</span>?re:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">int</span> K=<span class="built_in">Checkpow2</span>(n);</span><br><span class="line">    <span class="keyword">if</span>(K!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(K%<span class="number">2</span>?<span class="string">&quot;Bob\n&quot;</span>:<span class="string">&quot;Alice\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(n%<span class="number">2</span>?<span class="string">&quot;Bob\n&quot;</span>:<span class="string">&quot;Alice\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>比起解法，我更关心的是怎么想到这样分类的？</p><p>现在遇到跟因数有关的问题都会先往质因数分解的方向去靠，然后一般就会吃瘪，特别是需要处理加减操作的时候</p><p>功力尚浅啊</p>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 博弈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWERC2020</title>
      <link href="/2021/07/06/SWERC2020/"/>
      <url>/2021/07/06/SWERC2020/</url>
      
        <content type="html"><![CDATA[<p>6月26号下午跟队友打了次<a href="https://codeforces.com/gym/103081/">virtual test</a>，算是训练吧，把题改一下</p><p>按通过数从高到低来写吧</p><h1 id="A-Gratitude"><a href="#A-Gratitude" class="headerlink" title="A. Gratitude"></a>A. Gratitude</h1><h2 id="一句话题意"><a href="#一句话题意" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>给定$3n$个字符串和参数$K$，输出这些字符串中出现次数最多的前$K$个；出现次数相同的字符串，输出最后一次出现最晚的一个。</p><p>$1\le K\le 3N\le 100,000$</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>对每个字符串以出现次数为第一关键字，最后一次出现在何时为第二关键字，从大到小进行排序，输出前$K$个即可</p><p>复杂度$O(n\log n)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">0</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f|=(c==<span class="string">&#x27;-&#x27;</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;t=t*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">if</span>(f)t=-t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>+<span class="number">100</span>,maxlen=<span class="number">50</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,K;</span><br><span class="line">unordered_map&lt;string,pa&gt; mp;</span><br><span class="line">string str[maxn*<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> pa &amp;a,<span class="keyword">const</span> pa &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(K);</span><br><span class="line">    <span class="keyword">char</span> s[maxlen];</span><br><span class="line">    n*=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">gets</span>(s);</span><br><span class="line">        pa &amp;t=mp[str[i]=s];</span><br><span class="line">        t.first++;</span><br><span class="line">        t.second=i;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;pa&gt; ar;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)</span><br><span class="line">        ar.<span class="built_in">push_back</span>(i.second);</span><br><span class="line">    <span class="built_in">sort</span>(ar.<span class="built_in">begin</span>(),ar.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    K=<span class="built_in">min</span>(K,(<span class="keyword">int</span>)ar.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str[ar[i].second].<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这题是队友过的，这段代码有相当一部分参考了他当时的代码</p><p>以前甚少了解更高级的STL用法，之后要好好亮一下这部分科技树了</p></blockquote><h1 id="E-Cakes"><a href="#E-Cakes" class="headerlink" title="E. Cakes"></a>E. Cakes</h1><p>不太明白为什么这个题过的人数比A少</p><h2 id="一句话题意-1"><a href="#一句话题意-1" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>$n$种原料，给定制作一个蛋糕所需要的各种原料的量$a_i$和现有的量$b_i$，求最多能做多少个蛋糕</p><p>$n\le 10$</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>输出$min{\frac{b_i}{a_i}}$</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>略</p><h1 id="K-Unique-Activities"><a href="#K-Unique-Activities" class="headerlink" title="K. Unique Activities"></a>K. Unique Activities</h1><p>改着改着居然把队友的AC代码hack了</p><p>不过是小问题</p><h2 id="一句话题意-2"><a href="#一句话题意-2" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>给定字符串，找到字符串中最短的仅出现了一次的子串。若有多个这样的串，输出最早出现的一个</p><p>$n\le300000$</p><h2 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h2><p><del>为了改这个题重新亮了后缀数组的科技树</del></p><p>首先，倍增求出后缀数组和$height$数组</p><p>这里称$suffix[i]$表示以$i$为起点的后缀</p><p>以$sa[i]$为起点的自出现了一次的串长度应该为$max_{j\neq i}{lcp(suffix[i],suffix[j])}$+1</p><p>亦即$max_{j\neq i}{min{height[j+1]\dots height[i]}(j<i),min\{height[i+1]\dots height[j]\}(j>i)}$</i),min\{height[i+1]\dots></p><p>进一步地，当$j&lt;i$时，$j$减小不会使答案更优；</p><p>同理$j&gt;i$时，$j$增大也不会使答案更优</p><p>于是以$sa[i]$为起点的只出现了一次的串的长度即为$max{height[i],height[i+1]}$</p><p>扫描$height$数组，找到最小的串长度即可。若有多个，将起始位置更新为最小的那个</p><p>复杂度$O(n\log n)$</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">0</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f|=(c==<span class="string">&#x27;-&#x27;</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;t=t*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">if</span>(f)t=-t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300000</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> sa[maxn],rnk[maxn],tp[maxn],height[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)c[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)c[rnk[i]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;--i)sa[c[rnk[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetSA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)rnk[i]=s[i],tp[i]=i;</span><br><span class="line"><span class="built_in">Sort</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;n;m=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;++i)tp[++p]=n-w+i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(sa[i]&gt;w)tp[++p]=sa[i]-w;</span><br><span class="line"><span class="built_in">Sort</span>();</span><br><span class="line"><span class="built_in">swap</span>(tp,rnk);</span><br><span class="line">rnk[sa[<span class="number">1</span>]]=<span class="number">1</span>,p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">rnk[sa[i]]=(tp[sa[i]]==tp[sa[i<span class="number">-1</span>]] &amp;&amp; tp[sa[i]+w]==tp[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j,k=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k)--k;</span><br><span class="line">j=sa[rnk[i]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(s[i+k]==s[j+k])++k;</span><br><span class="line">height[rnk[i]]=k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>),m=<span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">    <span class="built_in">GetSA</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        cerr&lt;&lt;sa[i]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;height[i]&lt;&lt;endl;</span><br><span class="line">    <span class="function">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n,n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp=<span class="built_in">max</span>(height[i],height[i+<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(sa[i]+cmp<span class="number">-1</span>&gt;n)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,&#123;cmp,sa[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.first;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,s[ans.second+i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Safe-Distance"><a href="#C-Safe-Distance" class="headerlink" title="C. Safe Distance"></a>C. Safe Distance</h1><h2 id="一句话题意-3"><a href="#一句话题意-3" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>给定$xOy$平面和平面上的若干个点，要从$(0,0)$出发到达$(X,Y)$，要求路径距离给出的点尽可能远，求出路径与最近的点的距离的最大值</p><p>$1\le X,Y\le 1000000$</p><p>$1\le n \le 1000$</p><h2 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h2><p>考虑二分答案</p><p>假设我们二分得到的答案为$mid$，对其检查可行性</p><p>在平面上以所有的点为圆心画半径为$mid$的圆，那么路径不应该与这些圆有交点</p><p>想象将这些圆在平面上挖去，那么如果$mid$为可行答案，$(0,0)$与$(X,Y)$应仍连通</p><p>接下来考虑如何表示$(0,0)$与$(X,Y)$的连通性</p><p>假设我们要将平面沿一条线（可以是曲线）切开，使得$(0,0)$与$(X,Y)$不连通，这条线应当与平面的左边界和下边界、或左边界和右边界、或上边界和右边界、或上边界和下边界同时存在交点</p><p>那么如果我们画的圆的并能够包含这样的一条线，$(0,0)$与$(X,Y)$就是不连通的</p><p>我们可以以所有的点为顶点（称为平面点），点之间的距离为边权建立无向图，同时设置四个顶点$u_t,u_b,u_l,u_r$（称为边界点）分别代表上、下、左、右边界，平面点与边界点间的边的边权为点到对应边界的距离</p><p>那么，如果在图上存在一条路径分别以$u_l,u_b$、或$u_l,u_r$、或$u_t,u_r$、或$u_t,u_b$为起点和终点，满足边界点到平面点的边的边权小于等于$mid$，平面点之间的边的边权小于等于$2*mid$，那么$(0,0)$与$(X,Y)$就是不连通的</p><p>复杂度$O(n\log (X+Y))$</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>实际实现时，边权应为距离的平方以避免开平方根带来的精度误差</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">0</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f|=(c==<span class="string">&#x27;-&#x27;</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;t=t*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">if</span>(f)t=-t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//n+1 bottom(a),n+2 left(b),n+3 top(c),n+4 right(d)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> X,Y;</span><br><span class="line"><span class="keyword">double</span> x[maxn],y[maxn];</span><br><span class="line"><span class="keyword">double</span> tmid;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,nxt;</span><br><span class="line">    <span class="keyword">double</span> w;</span><br><span class="line">&#125;g[maxn*maxn*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],ecnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eADD</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">double</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g[++ecnt].u=u;g[ecnt].v=v;g[ecnt].w=w;g[ecnt].nxt=head[u];head[u]=ecnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dx=x[a]-x[b],dy=y[a]-y[b];</span><br><span class="line">    <span class="keyword">return</span> dx*dx+dy*dy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vst[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vst[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(u==n+<span class="number">2</span> || u==n+<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=g[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=g[i].v;</span><br><span class="line">        <span class="keyword">if</span>(vst[v])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">double</span> s=<span class="number">2</span>-(u&gt;n || v&gt;n);</span><br><span class="line">        s*=s;</span><br><span class="line">        <span class="keyword">if</span>(g[i].w&lt;=tmid*s)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(v))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">double</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tmid=mid*mid;</span><br><span class="line">    <span class="built_in">memset</span>(vst,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vst));</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dfs</span>(n+<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vst,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vst));</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dfs</span>(n+<span class="number">4</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;X,&amp;Y);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> d=y[i]*y[i];</span><br><span class="line">        <span class="built_in">eADD</span>(n+<span class="number">1</span>,i,d);</span><br><span class="line">        <span class="built_in">eADD</span>(i,n+<span class="number">1</span>,d);</span><br><span class="line">        d=x[i]*x[i];</span><br><span class="line">        <span class="built_in">eADD</span>(n+<span class="number">2</span>,i,d);</span><br><span class="line">        <span class="built_in">eADD</span>(i,n+<span class="number">2</span>,d);</span><br><span class="line">        d=(Y-y[i])*(Y-y[i]);</span><br><span class="line">        <span class="built_in">eADD</span>(n+<span class="number">3</span>,i,d);</span><br><span class="line">        <span class="built_in">eADD</span>(i,n+<span class="number">3</span>,d);</span><br><span class="line">        d=(X-x[i])*(X-x[i]);</span><br><span class="line">        <span class="built_in">eADD</span>(n+<span class="number">4</span>,i,d);</span><br><span class="line">        <span class="built_in">eADD</span>(i,n+<span class="number">4</span>,d);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> d=<span class="built_in">dist</span>(i,j);</span><br><span class="line">            <span class="built_in">eADD</span>(i,j,d);</span><br><span class="line">            <span class="built_in">eADD</span>(j,i,d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">double</span> l=<span class="number">0</span>,r=X+Y,ans;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;=eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid=(r+l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans=mid;</span><br><span class="line">            l=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="D-Jogging"><a href="#D-Jogging" class="headerlink" title="D. Jogging"></a>D. Jogging</h1><h2 id="一句话题意-4"><a href="#一句话题意-4" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>定义一个跑步路径为一条从0号顶点出发再回到0号顶点的路径，跑步路径上允许出现重边，允许在一条边上的任意位置折返。如果一条跑步路径经过了之前未出现过的边，那么这条跑步路径就是“有趣的”。</p><p>给定$I$个点$S$条边的简单无向带权图，下界$L$和上界$U$。现要求每天都要有一条”有趣的”跑步路径，且长度在上界和下界之间，问最多可以跑步多少天。</p><p>$1\le I,S\le 100000$</p><p>$1\le L\le U\le 42195$（一次马拉松的长度）</p><p>$1\le 边权\le 1000$</p><h2 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h2><p>由于我们可以在一条边上<del>来回摩擦</del>，所以不需要关心下界</p><p>如果每条跑步路径不原路返回，会使答案更劣，所以原路返回一定是最佳策略</p><p>那么题目可以转化成从顶点$0$出发，行走不大于$\frac{U}{2}$的距离，最多可以到达多少条边</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">0</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f|=(c==<span class="string">&#x27;-&#x27;</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;t=t*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">if</span>(f)t=-t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>+<span class="number">100</span>,maxm=<span class="number">100000</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,L,U;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w,nxt;</span><br><span class="line">&#125;g[maxm*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],ecnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eADD</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g[++ecnt].u=u;g[ecnt].v=v;g[ecnt].w=w;g[ecnt].nxt=head[u];head[u]=ecnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dist[maxn],vst[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">    dist[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;pa&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;-dist[<span class="number">0</span>],<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.<span class="built_in">top</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vst[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vst[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=g[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=g[i].v;</span><br><span class="line">            <span class="keyword">if</span>(!vst[v] &amp;&amp; dist[u]+g[i].w&lt;dist[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]+g[i].w;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;-dist[v],v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m),<span class="built_in">read</span>(L),<span class="built_in">read</span>(U);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v),<span class="built_in">read</span>(w);</span><br><span class="line">        <span class="built_in">eADD</span>(u,v,w);</span><br><span class="line">        <span class="built_in">eADD</span>(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ecnt;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span>(dist[g[i].u],dist[g[i].v])*<span class="number">2</span>&lt;U)</span><br><span class="line">            ++ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="待补完"><a href="#待补完" class="headerlink" title="待补完"></a>待补完</h1><h1 id="要填的坑"><a href="#要填的坑" class="headerlink" title="要填的坑"></a>要填的坑</h1><ul><li>STL的各种数据结构的使用</li><li>字符串后缀相关数据结构</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待填坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1542</title>
      <link href="/2021/07/04/CF1542/"/>
      <url>/2021/07/04/CF1542/</url>
      
        <content type="html"><![CDATA[<p>需要一点数学思维的一套题，可惜我并没有，于是掉大分</p><p>看完题解之后觉得解法相当巧妙，决定写一写</p><h1 id="A-Odd-Set"><a href="#A-Odd-Set" class="headerlink" title="A. Odd Set"></a>A. Odd Set</h1><p><a href="https://codeforces.com/contest/1542/problem/A">题目地址</a></p><h2 id="一句话题意"><a href="#一句话题意" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>给定$2n$个数，问是否存在一种将它们划分为$n$个pair$(a,b)$的方法，使得每个pair的和为奇数</p><p>$n\le100$</p><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>显然一个pair的和为奇数当且仅当它由一个奇数和一个偶数组成</p><p>判断是否有奇数个数是否为$n$即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>略</p><h1 id="B-Plus-and-Multiply"><a href="#B-Plus-and-Multiply" class="headerlink" title="B. Plus and Multiply"></a>B. Plus and Multiply</h1><p><a href="https://codeforces.com/contest/1542/problem/B">题目地址</a></p><h2 id="一句话题意-1"><a href="#一句话题意-1" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>给定一个集合$S$满足</p><ul><li>$1\in S$</li><li>如果$x\in S$，那么$ax\in S,x+b\in S$</li></ul><p>给定T组$n,a,b$，求$n\in S?$</p><p>$T\le 10^5$</p><p>$1\le n,a,b\le 10^9$</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>假设$b\ne 1$</p><p>$n\in S$当且仅当存在$m\in S$使得$n\equiv m\pmod b$且$m&lt;n$</p><p>显然，要构造出一个新的$m\space mod\space b$，只能采取$\times a$操作，因此$m$必然是$a$的幂</p><p>判断是否存在$a^k&lt;n$满足$n\equiv a^k\pmod b$即可</p><p>特判$b=1$的情况，显然答案恒为Yes</p><p>复杂度$O(\log n)$</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">0</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f|=(c==<span class="string">&#x27;-&#x27;</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;t=t*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">if</span>(f)t=-t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll n,a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(a),<span class="built_in">read</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%b==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll k=n%b;</span><br><span class="line">        <span class="keyword">for</span>(ll cur=<span class="number">1</span>;cur&lt;=n;cur*=a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur%b==k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="C-Strange-Function"><a href="#C-Strange-Function" class="headerlink" title="C. Strange Function"></a>C. Strange Function</h1><p><a href="https://codeforces.com/contest/1542/problem/C">题目地址</a></p><h2 id="一句话题意-2"><a href="#一句话题意-2" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>$f(n)$表示最小的不是$n$的因数的正整数</p><p>计算$\sum_{i=1}^nf(i)\space mod\space (10^9+7)$</p><p>$t(t\le 10^4)$组数据</p><p>$n\le 10^{16}$</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>注意到$f(n)=i$的含义是$lcm(1,2,\dots,i-1)\le n$，<strong>$f(n)$的值很小(小于$100$）</strong>，因此可以枚举$f(i)$。</p><p>满足$f(k)=i$的$k$的数量是$\lfloor \frac{n}{lcm(1,2,\dots,i-1)}\rfloor-\lfloor \frac{n}{lcm(1,2,\dots,i)}\rfloor$，亦即$k$可以被$1,2,\dots,i-1$整除而不能被$i$整除</p><p>于是答案即为$\sum_{i&gt;1}\lfloor \frac{n}{lcm(1,2,\dots,i-1)}\rfloor-\lfloor \frac{n}{lcm(1,2,\dots,i)}\rfloor$</p><p>上式还可以表示为$\sum_{i\ge1}\lfloor \frac{n}{lcm(1,2,\dots,i)}\rfloor+n$</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">0</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f|=(c==<span class="string">&#x27;-&#x27;</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;t=t*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">if</span>(f)t=-t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll n;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Gcd</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b?<span class="built_in">Gcd</span>(b,a%b):a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Lcm</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a/<span class="built_in">Gcd</span>(a,b)*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    ll lcm=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;lcm&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        lcm=<span class="built_in">Lcm</span>(lcm,i);</span><br><span class="line">        (ans+=n/lcm)%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(ans+n)%mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Tips！"><a href="#Tips！" class="headerlink" title="Tips！"></a>Tips！</h2><p>对于值较小的函数的和，可以枚举函数的值、计算值对应变量的个数来将复杂度转移到函数值上</p><h1 id="D-Priority-Queue"><a href="#D-Priority-Queue" class="headerlink" title="D. Priority Queue"></a>D. Priority Queue</h1><p><a href="https://codeforces.com/contest/1542/problem/D">题目地址</a></p><h2 id="一句话题意-3"><a href="#一句话题意-3" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>对于一个对小根堆进行操作的序列$S$，其中各元素的形式为<code>+ x</code>或<code>-</code>，分别表示入堆和出堆。设$f(S)$表示依照序列$S$对小根堆进行操作后，堆中所有元素的和</p><p>给定一个序列$A$，求$\sum f(B)\mod 998244353$，其中$B$是$A$的子序列</p><p>$n\le 500$</p><h2 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h2><p>我们可以计算堆中元素$x$的贡献</p><p>假设我们已经在第$I$个操作中加入了$x$，设为$X$，那么$X$有贡献的子序列$B$满足：</p><ul><li>包含第$I$个操作</li><li>设$s$表示当前堆中小于等于$x$的元素个数，不管在第$I$个操作后遇到多少个<code>-</code>操作，$s$必须大于0（除了序列执行结束后）</li></ul><p>可以得到以下DP：</p><p>设$f(i,j)$表示满足完成操作后$s=j$的$A[1\dots i]$的子序列个数</p><p>转移：</p><ul><li>$f(i-1,j)\rightarrow f(i,j)$，不包含第$i$个操作，$i\neq I$</li><li>$f(i-1,j)\rightarrow f(i,max(j-1,0))$，包含第$i$个操作，$i&lt;I$且该操作为<code>-</code></li><li>$f(i-1,j)\rightarrow f(i,j-1)$，包含第$i$个操作，$i&gt;I$且该操作为<code>-</code>，此时$j$不可以为$0$</li><li>$f(i-1,j)\rightarrow f(i,j)$，包含第$i$个操作且该操作为<code>+ x</code>，其中$x&gt;X$</li><li>$f(i-1,j)\rightarrow f(i,j+1)$，包含第$i$个操作且该操作为<code>+ x</code>，其中$x<X$；或$x=X$且$i>I$</X$；或$x=X$且$i></li></ul><p>$X$对答案的贡献为$X\times\sum_{i\ge 0}f(n,i)$</p><p>复杂度$O(n^3)$</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">0</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f|=(c==<span class="string">&#x27;-&#x27;</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;t=t*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">if</span>(f)t=-t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">ll dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">gets</span>(s);</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;+&#x27;</span>)<span class="built_in">sscanf</span>(s+<span class="number">1</span>,<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=n;++t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[t]==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&lt;=t || j&gt;<span class="number">0</span>)</span><br><span class="line">                        (dp[i][<span class="built_in">max</span>(j<span class="number">-1</span>,<span class="number">0</span>)]+=dp[i<span class="number">-1</span>][j])%=mod;<span class="comment">//case 2&amp;3</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i]&lt;a[t] || a[i]==a[t] &amp;&amp; i&lt;t)</span><br><span class="line">                        (dp[i][j+<span class="number">1</span>]+=dp[i<span class="number">-1</span>][j])%=mod;<span class="comment">//case 5</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        (dp[i][j]+=dp[i<span class="number">-1</span>][j])%=mod;<span class="comment">//case 4</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i!=t)</span><br><span class="line">                    (dp[i][j]+=dp[i<span class="number">-1</span>][j])%=mod;<span class="comment">//case 1</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">            (ans+=dp[n][i]*a[t]%mod)%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips!"></a>Tips!</h2><p>计算贡献的典型例子</p><h1 id="E-Abnormal-Permutation-Pairs"><a href="#E-Abnormal-Permutation-Pairs" class="headerlink" title="E. Abnormal Permutation Pairs"></a>E. Abnormal Permutation Pairs</h1><p><a href="https://codeforces.com/contest/1542/problem/E1">Easy</a></p><p><a href="https://codeforces.com/contest/1542/problem/E2">Hard</a></p><blockquote><p>题目与多项式有关，需要用到FFT，但是这个科技树暂时灭掉了，以后有机会的话来填一下</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
            <tag> 待填坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在树莓派上跑BOINC</title>
      <link href="/2021/05/14/boinc-on-raspi/"/>
      <url>/2021/05/14/boinc-on-raspi/</url>
      
        <content type="html"><![CDATA[<h1 id="BOINC是什么？"><a href="#BOINC是什么？" class="headerlink" title="BOINC是什么？"></a>BOINC是什么？</h1><p>BOINC是<strong>伯克利开放式网络计算平台(Berkeley Open Infrastructure for Network Computing)</strong>的缩写，是一个分布式计算平台。</p><p>粗略来讲，就是项目发布者可以在平台上发布计算任务，全球各地的电脑用户可以在平台上下载这些任务并进行计算，贡献自己的空闲算力。</p><p><strong>这不比挖矿炒币高尚？</strong></p><h1 id="在树莓派上安装BOINC"><a href="#在树莓派上安装BOINC" class="headerlink" title="在树莓派上安装BOINC"></a>在树莓派上安装BOINC</h1><p>其实也很简单，用apt就可以搞定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install boinc</span><br></pre></td></tr></table></figure><p>按照BOINC官网的说法，安装之后会自动把boinc设为自启动，这时候只需要重启即可</p><p>也可以在终端中运行<code>/etc/init.d/boinc-client start</code>手动启动</p><p>接着你会在菜单的系统工具里看到BOINC Manager</p><p><img src="/2021/05/14/boinc-on-raspi/boincmgr.png" alt="boinc manager"></p><p>直接运行就可以了</p><p><del>至少网上所有的教程都是这么告诉我的</del></p><hr><p>直接运行之后，manager一直在连接到localhost，死活连不上</p><p>搞了一下午，直到我跑到boinc目录下面看到了这玩意</p><p><img src="/2021/05/14/boinc-on-raspi/remote_hosts.png" alt></p><p><img src="/2021/05/14/boinc-on-raspi/hostlist.png" alt></p><p>那没事了</p><p>在后面把本机ip加上，不知道为什么直接写127.0.0.1不好使，于是把有线和无线网卡的ip都加了进去</p><p>再打开BOINC Manager</p><p><img src="/2021/05/14/boinc-on-raspi/boincmgrwindow.png" alt></p><p>完美√</p><hr><p>以前的话我是参加过SETI，Universe和Rosetta三个计划</p><p>不过现在好像SETI暂时没任务，Rosetta又不能用树莓派跑，只能跑Universe了</p><p><del>可惜Universe没有炫酷图片</del></p><p><img src="/2021/05/14/boinc-on-raspi/Universe.png" alt="Universe"></p><p>再把计算参数稍微调一下，不要让运算强度太高了</p><p>看一下温度</p><p><img src="/2021/05/14/boinc-on-raspi/temp.png" alt="温度"></p><p>还不错</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Linux </tag>
            
            <tag> 分布式计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在树莓派上配置raspap</title>
      <link href="/2021/05/14/raspap/"/>
      <url>/2021/05/14/raspap/</url>
      
        <content type="html"><![CDATA[<p>raspap其实是个类似于整合包一样的东西，把hostapd，dnsmasq之类的打包在一起然后提供而webUI给你管理，让你的树莓派摇身一变直接变成一个ap</p><h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>先把各种东西升级好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get fullupgrade</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>然后到<code>raspi-config</code>里设置好wifi地区</p><h1 id="开始安装吧！"><a href="#开始安装吧！" class="headerlink" title="开始安装吧！"></a>开始安装吧！</h1><p>raspap同样提供了一键安装脚本，只需要在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://install.raspap.com | bash</span><br></pre></td></tr></table></figure><p>脚本就会自动帮你安装（需要魔法上网）</p><p>你也可以手动安装，<a href="https://docs.raspap.com/manual/">这里是官方文档</a>，在此不赘述</p><p>默认配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IP address: 10.3.141.1</span><br><span class="line">Username: admin</span><br><span class="line">Password: secret</span><br><span class="line">DHCP range: 10.3.141.50 to 10.3.141.255</span><br><span class="line">SSID: raspi-webgui</span><br><span class="line">Password: ChangeMe</span><br></pre></td></tr></table></figure><p>连接到热点然后访问网关，或是访问<code>[树莓派ip]</code>即可对热点进行配置</p><blockquote><p>做这个ap一方面可以解决校园网的ip数限制问题，另一方面可能对未来在宿舍搞物联网会有点好处？</p></blockquote><h1 id="Update-2021-07-05"><a href="#Update-2021-07-05" class="headerlink" title="Update 2021.07.05"></a>Update 2021.07.05</h1><p>不记得是什么时候发现的，有段时间vnc传不了文件了，之后一直找不到原因</p><p>前两天突然想起来之前为了给以后的折腾预留端口，把raspap的热点管理网站的端口改成了81</p><p>隐隐感觉到是端口的问题，然后就先把raspap的端口号改成了90，结果就好了</p><p>照这么讲的话vnc传输文件的端口应该跟81有关，记下来</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在树莓派上运行BT下载</title>
      <link href="/2021/05/14/BT-on-raspi/"/>
      <url>/2021/05/14/BT-on-raspi/</url>
      
        <content type="html"><![CDATA[<h1 id="配置qBittorrent"><a href="#配置qBittorrent" class="headerlink" title="配置qBittorrent"></a>配置qBittorrent</h1><p>一台7*24的运行的树莓派，不用来下bt实在是太可惜了</p><h2 id="安装qBittorrent"><a href="#安装qBittorrent" class="headerlink" title="安装qBittorrent"></a>安装qBittorrent</h2><p>在终端运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qbittorrent qbittorrent-nox</span><br></pre></td></tr></table></figure><p>即可安装qbbittorrent和对应的web ui</p><h2 id="将qBittorrent设置为服务并开机自启"><a href="#将qBittorrent设置为服务并开机自启" class="headerlink" title="将qBittorrent设置为服务并开机自启"></a>将qBittorrent设置为服务并开机自启</h2><p>先别急着启动，接下来将qBittorrent设置为Service并保持常驻</p><p>运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建用户组</span></span><br><span class="line">sudo adduser --system --group qbittorrent-nox</span><br><span class="line"><span class="comment"># 将自己加入到这个用户组中</span></span><br><span class="line">sudo adduser [your-username] qbittorrent-nox</span><br><span class="line"><span class="comment"># 创建服务</span></span><br><span class="line">sudo nano /etc/systemd/system/qbittorrent-nox.service</span><br></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=qBittorrent Command Line Client</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">#Do not change to &quot;simple&quot;</span><br><span class="line">Type=forking</span><br><span class="line">User=qbittorrent-nox</span><br><span class="line">Group=qbittorrent-nox</span><br><span class="line">UMask=007</span><br><span class="line">ExecStart=/usr/bin/qbittorrent-nox -d --webui-port=8080</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>保存，然后在终端中运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start qbittorrent-nox</span><br></pre></td></tr></table></figure><p>开始运行</p><p>如果要开机自启，就运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> qbittorrent-nox</span><br></pre></td></tr></table></figure><p>然后再访问<code>https://[ip]:8080</code>即可打开webUI，默认账户密码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">account:admin</span><br><span class="line">password:adminadmin</span><br></pre></td></tr></table></figure><p>在webUI的设置中修改密码，保存即可</p><p><img src="/2021/05/14/BT-on-raspi/qbittorrent.png" alt="qbittorrent的webUI效果"></p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Linux </tag>
            
            <tag> BT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派配置记录</title>
      <link href="/2021/05/14/raspi/"/>
      <url>/2021/05/14/raspi/</url>
      
        <content type="html"><![CDATA[<p>其实一个月前就买了一个树莓派4B了，前两天搞着搞着把系统给弄炸了，又要从头来一遍，索性把配置过程记录一下吧</p><h1 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h1><p>我用的是树莓派官方发布的基于debian的raspios，先用win32diskimager把系统镜像烧录到sd卡中</p><p><img src="/2021/05/14/raspi/win32diskimager.png" alt="win32diskimager"></p><p>接着把sd卡装上树莓派，<del>插腚揩鸡</del></p><p>最开始先用显示器，把第一次开机的各种设置先调一下，然后把ssh跟vnc打开，再运行<code>raspi-config</code> ，把分辨率从default调成别的，插上网线，重启之后之后就可以用电脑远程访问了</p><blockquote><p>调分辨率的原因是我这里如果用default，vnc显示不了画面</p><p>不用无线的原因主要有两个，一方面校园网的无线ap可能是做了隔离还是什么的，如果用无线网，电脑的ssh连不上；另一方面，我打算在树莓派上面跑个ap，所以只能用有线网</p></blockquote><p><img src="/2021/05/14/raspi/desktop.png" alt="桌面"></p><p>接着更一下软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>就可以开始叻！</p><h1 id="魔法上网"><a href="#魔法上网" class="headerlink" title="魔法上网"></a>魔法上网</h1><p>到github上下载clash的二进制文件。由于树莓派4B是ARMv7架构所以选择armv7-linux版本</p><p>我个人喜欢把自己一些长时间运行的东西放到<code>~/Service</code>下面，所以把clash存到了这里</p><p>然后在终端跑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/pi/Service</span><br><span class="line">chmod +x ./clash</span><br><span class="line">./clash</span><br></pre></td></tr></table></figure><p>生成一次配置文件</p><p>再把机场给的clash配置文件放到<code>~/.config/clash</code>，覆盖原来的config.yaml</p><p>然后再在终端里运行clash，打开网页<code>clash.razord.top</code>查看是否正常运行即可，要记得去设置里允许来自局域网的链接</p><p>我个人不是很喜欢在树莓派上长时间开着clash，所以就不搞开机自启之类的了</p><p>终端里面需要用到的时候就</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~/Service/clash</span><br><span class="line"><span class="comment"># ctrl+z</span></span><br><span class="line"><span class="built_in">bg</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://localhost:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://localhost:7890&quot;</span></span><br></pre></td></tr></table></figure><h1 id="安装netdata监控"><a href="#安装netdata监控" class="headerlink" title="安装netdata监控"></a>安装netdata监控</h1><p>netdata是一个可视化的web端监控UI，可以用于监控树莓派的运行状况</p><p>安装也很简单，官方提供了一键安装脚本，所以在终端直接输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ss https://my-netdata.io/kickstart.sh)</span><br></pre></td></tr></table></figure><p>然后根据提示一路enter就可以了</p><p><img src="/2021/05/14/raspi/netdata.png" alt="netdata运行效果"></p><h1 id="配置Selenium"><a href="#配置Selenium" class="headerlink" title="配置Selenium"></a>配置Selenium</h1><p>其实最开始让我动买树莓派这个念头的是自动登录校园网这个想法。学校的校园网是每台设备24小时要重新登陆一次，手机的wifi登录页面又不能保存密码，还是有点麻烦。</p><p>之前试过抓包，结果后面发现校园网发的包似乎是用js加密过的，遂放弃。</p><p>后来发现了Selenium这么个浏览器自动测试脚本，我就打算通过它来模拟校园网登录。</p><p>在终端运行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装selenium包</span></span><br><span class="line">pip3 install selenium</span><br><span class="line"><span class="comment"># 安装对应的driver</span></span><br><span class="line">sudo apt install chromium-chromedriver</span><br></pre></td></tr></table></figure><p>然后就可以用py写脚本了，由于脚本涉及到一些敏感内容就不放在这里了。</p><p>感兴趣的读者可以自行了解一下selenium相关内容</p><hr><p>配置的话暂时就只有这么多，迟点再加别的折腾的内容吧</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/05/14/hello-world/"/>
      <url>/2021/05/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>你好，世界！</p><p>这是lizbaka在使用hexo部署的博客上的第一篇博文</p><p>坐稳了，我们要开始加速了XD</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
